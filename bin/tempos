#!/usr/bin/env ruby

require 'thor'
require_relative '../lib/tempos/commands'

class ReportCLI < Thor
  desc "show", "Show current project report"
  def show
    Tempos::Commands::Report.new(options).run
  end

  desc "daily", "Show current project daily report"
  def daily
    Tempos::Commands::DailyReport.new(options).run
  end

  default_task :show
end

class TemposCLI < Thor
  class_option :member, default: nil, required: false
  class_option :project, default: nil, required: false
  class_option :timezone, default: nil, required: false

  desc "config", "Show current configuration"
  def config
    Tempos::Commands::ShowConfiguration.new(options).run
  end

  desc "which", "Display current project"
  def which
    Tempos::Commands::ShowCurrentProject.new.run
  end

  desc "projects", "List existing projects"
  def projects
    Tempos::Commands::Projects.new.run
  end

  desc "project IDENTIFIER", "Set current project"
  def project(identifier)
    Tempos::Commands::SetCurrentProject.new.run identifier
  end

  desc "status", "Display which projects are started"
  option :'all-users', type: :boolean, default: false, aliases: :A
  option :'all-projects', type: :boolean, default: false, aliases: :a
  def status
    Tempos::Commands::Status.new(options).run
  end

  desc "start", "Start counting time in the current project"
  def start
    Tempos::Commands::Start.new(options).run
  end

  desc "stop", "Stop counting time in the current project"
  def stop
    Tempos::Commands::Stop.new(options).run
  end

  desc "add DURATION", "Add DURATION to the current project"
  def add(duration)
    Tempos::Commands::Add.new(options).run(duration)
  end

  desc "remove DURATION", "Remove DURATION from the current project"
  def remove(duration)
    Tempos::Commands::Remove.new(options).run(duration)
  end

  desc "set-budget AMOUNT CURRENCY", "Set current project budget"
  def set_budget(amount, currency)
    Tempos::Commands::SetBudget.new(options).run(amount, currency)
  end

  desc "set-deadline DEADLINE", "Set current project deadline"
  def set_deadline(deadline)
    Tempos::Commands::SetDeadline.new(options).run(deadline)
  end

  desc "set-rate AMOUNT CURRENCY", "Set current project rate"
  def set_rate(amount, currency, member=nil)
    Tempos::Commands::SetRate.new(options).run(amount, currency, member)
  end

  desc "budget", "Show current project budget"
  def budget
    Tempos::Commands::Budget.new(options).run
  end

  desc "deadline", "Show current project deadline"
  def deadline
    Tempos::Commands::Deadline.new(options).run
  end

  desc "invoice", "Indicate that an invoice has been emitted"
  def invoice
    Tempos::Commands::Invoice.new(options).run
  end

  desc "report", "Show current project report"
  subcommand :report, ReportCLI

  default_task :status
end

TemposCLI.start(ARGV)
